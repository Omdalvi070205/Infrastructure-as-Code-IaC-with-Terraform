
---- Commands Executed ---

1. terraform init

$ terraform init
Initializing the backend...
Initializing provider plugins...
- Reusing previous version of kreuzwerker/docker from the dependency lock file
- Using previously-installed kreuzwerker/docker v3.6.2

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

================================================================


2. terraform validate

$ terraform validate
Success! The configuration is valid.


=================================================================


3. terraform plan


$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated
with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.el_container will be created
  + resource "docker_container" "el_container" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = (known after apply)
      + exit_code                                   = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = (known after apply)
      + init                                        = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "notle_12"
      + network_data                                = (known after apply)
      + network_mode                                = "bridge"
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = true
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = true
      + wait                                        = false
      + wait_timeout                                = 60

      + healthcheck (known after apply)

      + labels (known after apply)
    }

  # docker_image.lucky will be created
  + resource "docker_image" "lucky" {
      + id          = (known after apply)
      + image_id    = (known after apply)
      + name        = "ubuntu:latest"
      + repo_digest = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.


================================================================


4. terraform apply

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_image.lucky: Creating...
docker_image.lucky: Creation complete after 7s [id=sha256:a08e551cb33850e4740772b38217fc1796a66da2506d312abe51acda354ff061ubuntu:latest]
docker_container.el_container: Creating...
docker_container.el_container: Creation complete after 1s [id=4a91f8066e8d282ff5a6e87187e73e1672292d0186364e034feddea3a50c19bf]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.



=================================================================


5. terraform destroy 


# docker_image.lucky will be destroyed
  - resource "docker_image" "lucky" {
      - id          = "sha256:a08e551cb33850e4740772b38217fc1796a66da2506d312abe51acda354ff061ubuntu:latest" -> null
      - image_id    = "sha256:a08e551cb33850e4740772b38217fc1796a66da2506d312abe51acda354ff061" -> null
      - name        = "ubuntu:latest" -> null
      - repo_digest = "ubuntu@sha256:a08e551cb33850e4740772b38217fc1796a66da2506d312abe51acda354ff061" -> null   
    }

Plan: 0 to add, 0 to change, 2 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

docker_container.el_container: Destroying... [id=4a91f8066e8d282ff5a6e87187e73e1672292d0186364e034feddea3a50c19bf]
docker_container.el_container: Destruction complete after 0s
docker_image.lucky: Destroying... [id=sha256:a08e551cb33850e4740772b38217fc1796a66da2506d312abe51acda354ff061ubuntu:latest]
docker_image.lucky: Destruction complete after 0s

Destroy complete! Resources: 2 destroyed.


===================================================================



